; BNF-ish description of Daedalus's syntax

alpha -> 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
       | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
       | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'
       | 'V' | 'W' | 'X' | 'Y' | 'Z'
       | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'
       | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
       | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'
       | 'v' | 'w' | 'x' | 'y' | 'z'

digit -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

identifier -> alpha ( alpha | digit | '_' )*

type-name -> 'void' | 'int' | 'float' | 'string' | class-name

variable-decl -> 'var' identifier
const-decl  -> 'const' identifier [ '=' expression ]

class-decl ->     'class'     identifier
                   class-decl-body

prototype-decl -> 'prototype' identifier '(' identifier ')' 
                   prototype-decl-body

instance-decl ->  'instance'  identifier '(' identifier ')'
                   instance-decl-body

func-decl -> 'func' type-name identifier '(' func-decl-argument-list ')'
              func-decl-body
func-decl-argument-list -> variable-decl ( ',' variable-decl )*

func-decl-body -> '{' statement* '}'

declaration -> class-decl
             | prototype-decl
             | instance-decl
             | func-decl
             | variable-decl
             | const-decl

branch-statement -> 'if' '(' expression ')' if-body [ 'else' if-body ]

call-statement -> identifier '(' argument-list ')' ';'

argument-list -> identifier ( ',' identifier )*

assignment-statement -> assignment-expr ';'
